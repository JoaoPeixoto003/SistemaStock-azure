const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const jwt = require("jsonwebtoken");
const { CosmosClient } = require("@azure/cosmos");
require('dotenv').config();

const app = express();
app.use(cors());
app.use(bodyParser.json());

const PORT = process.env.PORT || 8080;
const JWT_SECRET = process.env.JWT_SECRET || "segredo";

// Cosmos DB setup - espera-se COSMOS_ENDPOINT e COSMOS_KEY e COSMOS_DATABASE e COSMOS_CONTAINER_PRODUTOS
if (!process.env.COSMOS_ENDPOINT || !process.env.COSMOS_KEY) {
  console.warn("COSMOS_CONNECTION environment variables not set. Ensure COSMOS_ENDPOINT and COSMOS_KEY are set.");
}
const client = new CosmosClient({ endpoint: process.env.COSMOS_ENDPOINT, key: process.env.COSMOS_KEY });
const database = client.database(process.env.COSMOS_DATABASE || "InventarioDB");
const container = database.container(process.env.COSMOS_CONTAINER_PRODUTOS || "Produtos");

// Middleware de autenticação (simples)
function authenticate(req, res, next) {
  const authHeader = req.headers['authorization'];
  if (!authHeader) return res.status(401).json({ error: "Token em falta" });
  const token = authHeader.split(' ')[1];
  try {
    req.user = jwt.verify(token, JWT_SECRET);
    next();
  } catch (err) {
    return res.status(401).json({ error: "Token inválido" });
  }
}

// Health check
app.get("/api/health", (req, res) => res.json({ ok: true }));

// Login simples para testes
app.post("/api/auth/login", (req, res) => {
  const { username, password } = req.body;
  if ((username === "admin" && password === "1234") || (username === "joao" && password === "abcd")) {
    const token = jwt.sign({ username }, JWT_SECRET, { expiresIn: "2h" });
    return res.json({ token });
  }
  return res.status(401).json({ error: "Credenciais inválidas" });
});

// Listar produtos (lê do Cosmos DB)
app.get("/api/produtos", authenticate, async (req, res) => {
  try {
    const querySpec = { query: "SELECT * FROM c" };
    const { resources } = await container.items.query(querySpec).fetchAll();
    res.json(resources);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Erro ao buscar produtos" });
  }
});

// Criar produto (cria item no Cosmos DB) - espera 'categoria' no body (partition key)
app.post("/api/produtos", authenticate, async (req, res) => {
  try {
    const item = req.body;
    if (!item.categoria) item.categoria = "Geral";
    if (!item.id) item.id = require('crypto').randomUUID();
    const { resource } = await container.items.create(item);
    res.status(201).json(resource);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Erro ao criar produto" });
  }
});

// Apagar produto - precisa de id e categoria (partition key)
app.delete("/api/produtos/:id/:categoria", authenticate, async (req, res) => {
  try {
    const { id, categoria } = req.params;
    await container.item(id, categoria).delete();
    res.sendStatus(204);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Erro ao apagar produto" });
  }
});

const server = app.listen(PORT, () => {
  console.log(`API running on port ${PORT}`);
});

module.exports = server;
